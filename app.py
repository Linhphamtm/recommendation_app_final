# Final App - Product & User Recommendation System (With Clean Home Page)
# Ng∆∞·ªùi th·ª±c hi·ªán: Ph·∫°m Th·ªã Mai Linh
# Ng√†y b√°o c√°o: 13/04/2025

import streamlit as st
import pickle
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# ================================
# C·∫•u h√¨nh App
# ================================
st.set_page_config(page_title='H·ªá th·ªëng g·ª£i √Ω s·∫£n ph·∫©m', layout='wide', initial_sidebar_state='expanded')

# ================================
# Sidebar - Navigation v√† Th√¥ng tin
# ================================
st.sidebar.image('picture_2.png', use_column_width=True)
st.sidebar.title('üìÇ ƒêi·ªÅu h∆∞·ªõng')
page = st.sidebar.radio("Ch·ªçn m·ª•c", ['Home', 'Insight', 'App'])

st.sidebar.markdown("""
### üßë‚Äçüíª Ng∆∞·ªùi th·ª±c hi·ªán
**Ph·∫°m Th·ªã Mai Linh**

### üìÖ Ng√†y b√°o c√°o
**13/04/2025**
""")

# ================================
# Load model v√† d·ªØ li·ªáu ƒë·ªìng b·ªô
# ================================
with open('product_cosine.pkl', 'rb') as f:
    product_model = pickle.load(f)

vectorizer = product_model['vectorizer']
tfidf_matrix = product_model['tfidf_matrix']
df_product = product_model['dataframe']

with open('surprise_model.pkl', 'rb') as f:
    user_model = pickle.load(f)

algo = user_model['model']
df_user = user_model['df_sample']

valid_user_ids = df_user[df_user['product_id'].isin(df_product['product_id'])]['user_id'].unique().tolist()

# ================================
# Trang Home (Kh√¥ng tr√πng l·∫∑p sidebar)
# ================================
if page == 'Home':
    st.image('picture_1.png', width=180)
    st.title('Welcome to Shopee Recommendation App!')

    st.markdown("""
    ·ª®ng d·ª•ng h·ªó tr·ª£ t√¨m ki·∫øm s·∫£n ph·∫©m th·ªùi trang nam tr√™n Shopee,
    gi√∫p ng∆∞·ªùi d√πng l·ª±a ch·ªçn s·∫£n ph·∫©m ph√π h·ª£p d·ª±a tr√™n m√¥ t·∫£ ho·∫∑c l·ªãch s·ª≠ ƒë√°nh gi√°.

    ### üéì Th√¥ng tin ƒë·ªì √°n
    - **ƒê·ªì √°n t·ªët nghi·ªáp Data Science and Machine Learning**
    - **Kh√≥a h·ªçc:** DL07_DATN_k302_T37
    - **Gi·∫£ng vi√™n h∆∞·ªõng d·∫´n:** C√¥ Khu·∫•t Th√πy Ph∆∞∆°ng
    - **ƒê∆°n v·ªã ƒë√†o t·∫°o:** Trung T√¢m Tin H·ªçc - Tr∆∞·ªùng ƒê·∫°i h·ªçc Khoa h·ªçc T·ª± nhi√™n

    ### üîç Ch·ª©c nƒÉng ch√≠nh
    - G·ª£i √Ω s·∫£n ph·∫©m d·ª±a tr√™n n·ªôi dung m√¥ t·∫£
    - G·ª£i √Ω s·∫£n ph·∫©m d·ª±a tr√™n l·ªãch s·ª≠ ƒë√°nh gi√° ng∆∞·ªùi d√πng

    üëâ H√£y ch·ªçn m·ªôt m·ª•c trong thanh ƒëi·ªÅu h∆∞·ªõng b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu!
    """)

# ================================
# Trang Insight
# ================================
elif page == 'Insight':
    st.title('üìä Project Insight')

    st.header('üéØ M·ª•c ti√™u project')
    st.markdown("""
    X√¢y d·ª±ng h·ªá th·ªëng g·ª£i √Ω s·∫£n ph·∫©m th·ªùi trang nam tr√™n Shopee, nh·∫±m h·ªó tr·ª£ ng∆∞·ªùi ti√™u d√πng d·ªÖ d√†ng t√¨m ki·∫øm s·∫£n ph·∫©m ph√π h·ª£p d·ª±a tr√™n:

    - **G·ª£i √Ω theo n·ªôi dung s·∫£n ph·∫©m:** D·ª±a tr√™n m√¥ t·∫£ chi ti·∫øt c·ªßa s·∫£n ph·∫©m.
    - **G·ª£i √Ω theo ng∆∞·ªùi d√πng:** D·ª±a tr√™n l·ªãch s·ª≠ ƒë√°nh gi√° v√† t∆∞∆°ng t√°c c·ªßa ng∆∞·ªùi d√πng.
    """)

    st.header('üìä Kh√°m ph√° d·ªØ li·ªáu (EDA)')
    st.subheader('Wordcloud m√¥ t·∫£ s·∫£n ph·∫©m')
    text = ' '.join(df_product['final_cleaned_tokens'].apply(lambda x: ' '.join(x)))
    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.imshow(wordcloud, interpolation='bilinear')
    ax.axis('off')
    st.pyplot(fig)

    st.subheader('Ph√¢n ph·ªëi rating s·∫£n ph·∫©m')
    st.bar_chart(df_product['rating'].value_counts().sort_index())

    st.subheader('Ph√¢n ph·ªëi rating t·ª´ ng∆∞·ªùi d√πng')
    st.bar_chart(df_user['rating'].value_counts().sort_index())

    st.header('üßπ Quy tr√¨nh l√†m s·∫°ch d·ªØ li·ªáu')
    st.graphviz_chart('''
    digraph {
        node [shape=rectangle, style=rounded, color=orange, fontname="Helvetica", fontsize=12]
        "B∆∞·ªõc 1: Chu·∫©n h√≥a vƒÉn b·∫£n m√¥ t·∫£ s·∫£n ph·∫©m" -> "B∆∞·ªõc 2: Lo·∫°i b·ªè nhi·ªÖu v√† pattern kh√¥ng mong mu·ªën"
        "B∆∞·ªõc 2: Lo·∫°i b·ªè nhi·ªÖu v√† pattern kh√¥ng mong mu·ªën" -> "B∆∞·ªõc 3: T√°ch t·ª´ v√† lo·∫°i b·ªè stopword"
        "B∆∞·ªõc 3: T√°ch t·ª´ v√† lo·∫°i b·ªè stopword" -> "B∆∞·ªõc 4: K·∫øt qu·∫£ x·ª≠ l√Ω s·∫µn s√†ng cho vector h√≥a"
    }
    ''')

    st.header('üß© Thu·∫≠t to√°n s·ª≠ d·ª•ng')
    st.markdown("""
    - **Cosine Similarity:** ƒêo m·ª©c ƒë·ªô t∆∞∆°ng ƒë·ªìng m√¥ t·∫£ s·∫£n ph·∫©m.
    - **Surprise SVD:** Ph√¢n r√£ ma tr·∫≠n d·ª± ƒëo√°n s·∫£n ph·∫©m ph√π h·ª£p v·ªõi ng∆∞·ªùi d√πng.
    """)

    st.header('üìà ƒê√°nh gi√° thu·∫≠t to√°n')
    st.markdown("""
    **Cosine Similarity:**
    - ∆Øu ƒëi·ªÉm: D·ªÖ tri·ªÉn khai, tr·ª±c quan.
    - H·∫°n ch·∫ø: Kh√¥ng c√° nh√¢n h√≥a.

    **Surprise SVD:**
    - ∆Øu ƒëi·ªÉm: C√° nh√¢n h√≥a theo ng∆∞·ªùi d√πng.
    - H·∫°n ch·∫ø: C·∫ßn ƒë·ªß d·ªØ li·ªáu ƒë√°nh gi√°.
    """)

# ================================
# Trang App (Recommendation)
# ================================
elif page == 'App':
    st.title('ü§ñ Recommendation App')

    tab1, tab2 = st.tabs(["üõçÔ∏è G·ª£i √Ω theo s·∫£n ph·∫©m", "üë• G·ª£i √Ω theo ng∆∞·ªùi d√πng"])

    with tab1:
        st.header('G·ª£i √Ω theo s·∫£n ph·∫©m (Content-based)')
        user_input = st.text_input('Nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m b·∫°n mu·ªën t√¨m g·ª£i √Ω:')
        top_k = st.slider('S·ªë l∆∞·ª£ng s·∫£n ph·∫©m g·ª£i √Ω:', min_value=1, max_value=20, value=5)

        if st.button('üìä Hi·ªÉn th·ªã g·ª£i √Ω s·∫£n ph·∫©m'):
            if not user_input.strip():
                st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m ƒë·ªÉ nh·∫≠n g·ª£i √Ω.")
            else:
                user_input_vector = vectorizer.transform([user_input])
                sim_scores = list(enumerate(cosine_similarity(user_input_vector, tfidf_matrix)[0]))
                sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[:top_k]

                recommendations = []
                for idx, score in sim_scores:
                    row = df_product.iloc[idx]
                    recommendations.append({
                        '·∫¢nh': row['image'] if pd.notna(row['image']) else '',
                        'T√™n s·∫£n ph·∫©m': row['product_name'],
                        'Gi√°': f"{row['price']:.0f} VND" if pd.notna(row['price']) else 'N/A',
                        'ƒêi·ªÉm t∆∞∆°ng ƒë·ªìng': f"{score:.2f}",
                        'Link': f"[Xem s·∫£n ph·∫©m]({row['link']})" if pd.notna(row['link']) else "N/A"
                    })

                st.markdown("### üéØ K·∫øt qu·∫£ g·ª£i √Ω:")
                for rec in recommendations:
                    cols = st.columns([1, 3])
                    if rec['·∫¢nh']:
                        cols[0].image(rec['·∫¢nh'], width=120)
                    else:
                        cols[0].empty()
                    cols[1].markdown(f"**{rec['T√™n s·∫£n ph·∫©m']}**\nüí∞ {rec['Gi√°']} | ‚≠êÔ∏è ƒêi·ªÉm t∆∞∆°ng ƒë·ªìng: {rec['ƒêi·ªÉm t∆∞∆°ng ƒë·ªìng']}\nüîó {rec['Link']}")
                    cols[1].markdown("---")

                results_df = pd.DataFrame(recommendations)
                csv = results_df.to_csv(index=False).encode('utf-8')
                st.download_button("üì• T·∫£i k·∫øt qu·∫£ v·ªÅ CSV", data=csv, file_name='recommendations_product.csv', mime='text/csv')

    with tab2:
        st.header('G·ª£i √Ω theo ng∆∞·ªùi d√πng (Collaborative filtering)')
        selected_user = st.selectbox('Ch·ªçn User b·∫°n mu·ªën t√¨m g·ª£i √Ω:', valid_user_ids)
        top_k_user = st.slider('S·ªë l∆∞·ª£ng s·∫£n ph·∫©m g·ª£i √Ω:', min_value=1, max_value=20, value=5, key='user_slider')

        if st.button('üìä Hi·ªÉn th·ªã g·ª£i √Ω ng∆∞·ªùi d√πng'):
            user_ratings = df_user[df_user['user_id'] == selected_user]
            if user_ratings.empty:
                st.warning("‚ö†Ô∏è Ng∆∞·ªùi d√πng n√†y kh√¥ng c√≥ ƒë√°nh gi√° trong d·ªØ li·ªáu!")
            else:
                all_product_ids = df_product['product_id'].unique()
                predictions = [(product_id, algo.predict(selected_user, product_id).est) for product_id in all_product_ids]
                predictions = sorted(predictions, key=lambda x: x[1], reverse=True)[:top_k_user]

                recommendations = []
                for pid, est in predictions:
                    row = df_product[df_product['product_id'] == pid].iloc[0]
                    recommendations.append({
                        '·∫¢nh': row['image'] if pd.notna(row['image']) else '',
                        'T√™n s·∫£n ph·∫©m': row['product_name'],
                        'Gi√°': f"{row['price']:.0f} VND" if pd.notna(row['price']) else 'N/A',
                        'Rating d·ª± ƒëo√°n': f"{est:.2f}",
                        'Link': f"[Xem s·∫£n ph·∫©m]({row['link']})" if pd.notna(row['link']) else "N/A"
                    })

                st.markdown("### üéØ K·∫øt qu·∫£ g·ª£i √Ω:")
                for rec in recommendations:
                    cols = st.columns([1, 3])
                    if rec['·∫¢nh']:
                        cols[0].image(rec['·∫¢nh'], width=120)
                    else:
                        cols[0].empty()
                    cols[1].markdown(f"**{rec['T√™n s·∫£n ph·∫©m']}**\nüí∞ {rec['Gi√°']} | ‚≠êÔ∏è Rating d·ª± ƒëo√°n: {rec['Rating d·ª± ƒëo√°n']}\nüîó {rec['Link']}")
                    cols[1].markdown("---")

                results_df_user = pd.DataFrame(recommendations)
                csv = results_df_user.to_csv(index=False).encode('utf-8')
                st.download_button("üì• T·∫£i k·∫øt qu·∫£ v·ªÅ CSV", data=csv, file_name='recommendations_user.csv', mime='text/csv')